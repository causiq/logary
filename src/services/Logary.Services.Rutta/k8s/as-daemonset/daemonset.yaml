# https://kubernetes.io/docs/tasks/inject-data-application/downward-api-volume-expose-pod-information/#capabilities-of-the-downward-api
# https://stackoverflow.com/questions/50216813/exposing-a-daemonset-service-for-consumption-by-pods-on-the-same-node
# https://github.com/ExpediaDotCom/kubernetes-sidecar-injector
# https://github.com/jaegertracing/jaeger-operator/issues/427
# https://github.com/jaegertracing/jaeger-operator

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: rutta

spec:
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/scrape: "true"
        prometheus.io/port: "9114"

    spec:
      serviceAccountName: rutta

      containers:
      - name: rutta
        image: logary/rutta
        args: [ "router",
                "--health", "0.0.0.0:9114",
                "--listener", "http", "0.0.0.0:3000", "json",
                "--listener", "udp", "0.0.0.0:14001", "json",
                "--target", "console://." ]

        env:
        - name: LOGARY_RUTTA_ANALYTICS_ID
          value: open-source

        ports:
        - name: http-json
          containerPort: 3000

        - name: udp-json
          containerPort: 14001

        # The kubelet uses readiness probes to know when a container is ready to start accepting traffic.
        readinessProbe:
          initialDelaySeconds: 0
          httpGet:
            path: /metrics
            port: 9114

        # Many applications running for long periods of time eventually transition to broken states, and cannot recover except by being restarted. Kubernetes provides liveness probes to detect and remedy such situations.
        livenessProbe:
          initialDelaySeconds: 10
          httpGet:
            path: /metrics
            port: 9114

        resources:
          limits:
            cpu: 2500m
            memory: 1024Mi
          requests:
            cpu: 200m
            memory: 150Mi

        #volumeMounts:
        #- name: varlog
        #  mountPath: /var/log
        #- name: varlibdockercontainers
        #  mountPath: /var/lib/docker/containers
        #  readOnly: true
      #terminationGracePeriodSeconds: 30
      #volumes:
      #- name: varlog
      #  hostPath:
      #    path: /var/log
      #- name: varlibdockercontainers
      #  hostPath:
      #    path: /var/lib/docker/containers